package com.vshow.control.tool;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;

import java.io.UnsupportedEncodingException;
import java.util.Iterator;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;

import com.vshow.control.data.Client;

public class MainSendMsgHandle extends Thread {
	
	
	
	private static Log logger = LogFactory.getLog(MainSendMsgHandle.class);
	
	@Override
	public void run() {
		while (true) {
			try {
				//遍历消息队列
				Client cli;
				for(Iterator itr = Constant.messageMap.keySet().iterator(); itr.hasNext();){
			    	
			    	   String key = (String) itr.next();
			    	   Mlt msgList = Constant.messageMap.get(key);
			    	   if (msgList != null) {
			    	
			    		   ChannelHandlerContext ctx=VSNettyChannelMap.get(key);
			    		   //System.out.println("ctx:"+ctx);
			    		   if(ctx!=null){
			    			   if (msgList.allmsg.size() > 0) {
			    				   
			    				    MyMsg mmTemp =msgList.allmsg.get(0);
			    					cli = new Client();   
			    				    if(mmTemp.fbType==1||mmTemp.fbType==7||mmTemp.fbType==23||mmTemp.fbType==17||mmTemp.fbType==16||mmTemp.fbType==18){
			    				    	if(Constant.downloadQueue.size()<Constant.downloadQueueSize){
			    				    		 
							   				MyMsg mm = msgList.allmsg.remove(0);
							   				String cmd = mm.msg;
							   				cli.setName(mm.sendkey);
							   				cli.setMark(key);
							   				cli.setState(1);
							   				try {
							   					if (cmd.isEmpty()) {
							   						cmd = "z";
							   					}
							   					logger.info("发送:["+key+"]"+cmd);
							   				    //send
							   					sendmsg(ctx,cmd);
							   					
							   					//存入消息缓存集合
							   					//Constant.messageMapCache.put(key+"@"+mm.sendkey,mm);
							   					
							   					try {
							   						if(mm.sendkey.equals("")){
							   							
							   						}else{
							   							
							   							//更新结果result
							   							SqlConnect.getSqlMapInstance().update("up_on_result_suc", cli);
							   							
							   							//更新最后一次播放状态
							   							SqlConnect.getSqlMapInstance().update("up_cp_state",cli);
							   							
							   						}
							   					
							   					} catch (Exception e) {
							   						logger.error(e);
							   					}
							   				} catch (Exception e) {
							   					//VSNettyChannelMap.remove((SocketChannel)ctx.channel());
							   					logger.error(e);
							   					msgList.allmsg.add(mm);
							   					return;
							   				}       		
							   				
							   				//Constant.downloadQueue.put(key+"@"+mm.sendkey, mm);
							   				Constant.downloadQueue.put(key, mm);
			    				    	}
			    				    	
			    				    }else{
			    				    
						   				MyMsg mm = msgList.allmsg.remove(0);
						   				String cmd = mm.msg;
						   				cli.setName(mm.sendkey);
						   				cli.setMark(key);
						   				cli.setState(1);
						   				try {
						   					if (cmd.isEmpty()) {
						   						cmd = "z";
						   					}
						   					logger.info("发送:["+key+"]"+cmd);
						   				    //send
						   					sendmsg(ctx,cmd);
						   					
						   					try {
						   						if(mm.sendkey.equals("")){
						   							
						   						}else{
						   							
						   							//更新结果result
						   							SqlConnect.getSqlMapInstance().update("up_on_result_suc", cli);
						   							
						   							//更新最后一次播放状态
						   							SqlConnect.getSqlMapInstance().update("up_cp_state",cli);
						   							
						   						}
						   					
						   						
						   					} catch (Exception e) {
						   						logger.error(e);
						   					}
						   				} catch (Exception e) {
						   					//VSNettyChannelMap.remove((SocketChannel)ctx.channel());
						   					logger.error(e);
						   					msgList.allmsg.add(mm);
						   					return;
						   				}       		
			    				    }
			   			    }
				   			if (msgList.allmsgBuss.size() > 0) {
				   				
				   				MyMsg mm = msgList.allmsgBuss.remove(0);
				   				String cmd = mm.msg;
				   				sendmsg(ctx,cmd);
				   				
				   			}
			    			   
			    	  }
			   			  
			   		} 
			    } 
				
				sleep(100);
			} catch (Exception e) {
				logger.error(e);
			}
			
			
		}
	}
	
	//发送消息
	public synchronized void sendmsg(ChannelHandlerContext ctx,String msg){
		
		try {
			
			     if (new VVersion().pwdPloy.equals("1")){
			    	 
				       msg=DesUtil.encrypt(msg,DesUtil.keyStatic);
				       
			     }
			     //System.out.println("发送:"+msg);
			     NettyChannel nettyChannel=NettyChannelUtil.getChannelHandlerContextNettyChannel(ctx);  		 
			     
			     byte[] req;
				 
			     if(nettyChannel.isCheckMsgFlag()){
					 
					  req =VSEchoServerHandler.getSendMsgNew(msg,nettyChannel.getCode());
				 
				 }else{
					 
					  req = msg.getBytes("UTF-8");
					  
				 }
				 //logger.info("发送终端协议[开始]:"+new String(req));
				 
				 logger.info("发送终端协议[开始]:"+msg);
				 
				 ByteBuf pingMessage = Unpooled.buffer();
				 //ByteBuf pingMessage=PooledByteBufAllocator.DEFAULT.directBuffer(1024);
				 pingMessage.writeBytes(req);
				 
				 ctx.writeAndFlush(pingMessage);
				 
				 //pingMessage.release();
				 
				 logger.info("发送终端协议[结束]");
				
		} catch (Exception e) {
			
		   e.printStackTrace();
		}
		 
	}
}
